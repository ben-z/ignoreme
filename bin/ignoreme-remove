#!/usr/bin/env node

'use strict';

const fs = require('fs');
const program = require('commander');
const dedupe = require('dedupe');
const winston = require('winston');
const pjson = require('../package.json');
const {
  beginLanguageSeparator,
  endLanguageSeparator,
} = require('../lib/separators');

program
  .version(pjson.version)
  .arguments('<languages...>')
  .action((languages) => {
    // remove duplicates
    languages = dedupe(languages);

    const languagesRemoved = [];
    const languagesNotFound = [];

    fs.readFile('.gitignore', (err, ignoreFile) => {
      if (err) {
        winston.error(err);
        process.exit(1);
      }

      ignoreFile = ignoreFile.toString();

      // iterate through languages and remove them from .gitignore
      for (let language of languages) {
        winston.verbose(`Attempting to remove ${language}`);

        language = language.toLowerCase();
        const begSep = beginLanguageSeparator(language);
        const endSep = endLanguageSeparator(language);
        const begSepIndex = ignoreFile.indexOf(begSep);
        const endSepIndex = ignoreFile.indexOf(endSep);

        if (~begSepIndex && ~endSepIndex) {
          ignoreFile = (ignoreFile.slice(0, begSepIndex)
                        + ignoreFile.slice(endSepIndex + endSep.length))
                       .replace(/(?:\r\n|\r|\n){3,}/g, '\n\n');
          languagesRemoved.push(language);
        } else {
          languagesNotFound.push(language);
        }
      }

      fs.writeFile('.gitignore', ignoreFile, (err) => {
        if (err) {
          winston.error(err);
          process.exit(1);
        }
      });

      const removed = languagesRemoved.join(', ');
      const notFound = languagesNotFound.join(', ');
      const numRemoved = languagesRemoved.length;
      const numNotFound = languagesNotFound.length;

      if (numRemoved > 0) {
        winston.info(`${numRemoved} gitignore(s) removed: ${removed}`);
      }
      if (numNotFound > 0) {
        winston.warn(`${numNotFound} gitignore(s) not found`+
                     `in .gitignore: ${notFound}`);
      }
    });
  })
  .parse(process.argv);
